@ 입력값
N = 임의의 수(N의 2승은 학생의 수이자 교실의 크기)
students = 타겟 학생과 그가 좋아하는 학생의 배열
map = new Map(), 타겟 학생을 key로 그가 좋아하는 학생을 value로 넣는다.
classroom = 교실의 크기, 2차원 배열로 N의 2승만큼 초기화한다.

@ 사전 정의
dx = 상 하를 표기할 row 증가값
dy = 좌 우를 표기할 col 증가값

for students
  : 타겟 학생으로 dfs 탐색하고 반환된 좌표를 저장한다.
  x, y = dfs(students[0])
  : 해당 좌표에 앉힌다.
  classroom[x][y] = student[0]
  
: 교실을 탐색한다.
function dfs
  love = 인접한 좋아하는 학생의 최대 수
  empty = 인접한 빈 칸의 최대 수
  lx = 현재 row 좌표(last x의 뜻으로 자주 사용하는 식별자임)
  ly = 현재 col 좌표(last y의 뜻으로 자주 사용하는 식별자임)
  : 3번 조건을 상기하고, 역탐색을 실시해서 상시 적용으로 만든다.
  for i, N-1 to 0
    for j, N-1 to 0
      tempLove = 탐색하는 좌표에서의 인접한 좋아하는 사람 수
      tempEmpty = 탐색하는 좌표에서의 인접한 빈 칸의 수
      : 현재 좌표가 비어있어야 탐색을 시작한다.
      for index, 0 to 4
        nx = 현재 좌표 + dx[index]로 다음 탐색 row 좌표
        ny = 현재 좌표 + dy[index]로 다음 탐색 col 좌표
        : nx와 ny가 0 이상이고 N 미만이라면 유효한 좌표이다.
        if nx >= 0, ny >= 0, nx < N, ny < N
          : 다음 좌표가 비어있다면 인접한 빈 공간의 수를 증가
          tempEmpty++;
          : 다음 좌표가 좋아하는 사람이 앉아있다면 좋아하는 사람 수 증가
          tempLove++;
      
      : 현재 좌표에 대한 상하좌우 탐색이 종료되었다면 유효성 검사

      : 인접한 좋아하는 학생의 최대 수보다
        탐색하는 좌표에서의 인접한 좋아하는 사람 수가
        크거나 같다면 조건이 1번 조건을 충족한다.
      love <= tempLove
        : 만약 같다면 2번 조건을 따져야한다.
        love === tempLove && empty <= tempEmpty
          : 해당 조건이 옳다면 이 좌표는 앉을 수 있는 좌표이므로
            현재 탐색하는 좌표로 대치한다.
          lx = i, 탐색 좌표
          ly = j, 탐색 좌표가

          : 좋아하는 사람의 최댓값, 빈 칸의 최댓값도
            현재 탐색했던 수들로 대치한다.
          love = tempLove
          empty = tempEmpty
        : 아니라면 해당 좌표에 앉힌다.
          : 해당 조건이 옳다면 이 좌표는 앉을 수 있는 좌표이므로
            현재 탐색하는 좌표로 대치한다.
          lx = i, 탐색 좌표
          ly = j, 탐색 좌표가

          : 좋아하는 사람의 최댓값, 빈 칸의 최댓값도
            현재 탐색했던 수들로 대치한다.
          love = tempLove
          empty = tempEmpty

  : 모든 탐색이 종료된다면 재할당된 좌표를 반환한다.
  return lx, ly


: 만족도를 구한다.
happy = 0, 만족도

for i, 1 to N
  for j, 1 to N
    tempLove = 만족도를 계산할 인접한 좋아하는 학생 수
      for index, 0 to 4
        nx = 현재 좌표 + dx[index]로 다음 탐색 row 좌표
        ny = 현재 좌표 + dy[index]로 다음 탐색 col 좌표
        : nx와 ny가 0 이상이고 N 미만이라면 유효한 좌표이다.
        if nx >= 0, ny >= 0, nx < N, ny < N
          : 다음 좌표가 좋아하는 사람이 앉아있다면 좋아하는 사람 수 증가
          tempLove++;
      tempLove가 1명이라면 1점
                 2명이라면 10점
                 3명이라면 100점
                 4명이라면 1000점을 happy에 계속 더한다.
  
: 출력
happy